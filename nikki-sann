<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <title>日記アプリ</title>
  <style>
    body { font-family: sans-serif; }
    input, textarea, select { display: block; margin: 4px 0; width: 100%; max-width: 400px; }
    #diary-list li { cursor: pointer; margin-bottom: 6px; }
  </style>
</head>
<body>
  <h1>日記アプリ</h1>

  <!-- ログインフォーム -->
  <div id="auth-area">
    <input type="email" id="email" placeholder="メールアドレス">
    <input type="password" id="password" placeholder="パスワード">
    <button onclick="loginEmail()">ログイン</button>
    <button onclick="signupEmail()">新規登録</button>
    <button onclick="loginWithGoogle()">Googleログイン</button>
  </div>

  <!-- ログイン後エリア -->
  <div id="user-area" style="display: none;">
    <p>ログイン中: <span id="user-email"></span></p>
    <button onclick="logout()">ログアウト</button>

    <h2>新しい日記を書く</h2>
    <form id="diary-form">
      <input type="date" id="diary-date" required>
      <input type="text" id="diary-title" placeholder="タイトル" required>
      <select id="diary-weather">
        <option value="">天気を選択</option>
        <option>晴れ</option><option>曇り</option><option>雨</option><option>雪</option>
      </select>
      <textarea id="diary-body" placeholder="本文" rows="5"></textarea>
      <input type="text" id="diary-health" placeholder="健康状態（例: 良好、微熱、頭痛など）">
      <button type="submit">保存</button>
    </form>

    <h2>日記一覧</h2>
    <ul id="diary-list"></ul>

    <div id="diary-detail" style="display:none;">
      <h3>日記詳細</h3>
      <input type="date" id="detail-date">
      <input type="text" id="detail-title">
      <select id="detail-weather">
        <option>晴れ</option><option>曇り</option><option>雨</option><option>雪</option>
      </select>
      <textarea id="detail-body" rows="5"></textarea>
      <input type="text" id="detail-health">
      <button onclick="updateDiary()">更新</button>
    </div>
  </div>

  <!-- Firebase SDK -->
  <script type="module">
    import { initializeApp } from "https://www.gstatic.com/firebasejs/10.12.0/firebase-app.js";
    import { getAuth, signInWithEmailAndPassword, createUserWithEmailAndPassword,
             GoogleAuthProvider, signInWithPopup, onAuthStateChanged, signOut } from "https://www.gstatic.com/firebasejs/10.12.0/firebase-auth.js";
    import { getFirestore, collection, addDoc, getDocs, doc, getDoc, updateDoc } from "https://www.gstatic.com/firebasejs/10.12.0/firebase-firestore.js";

    const firebaseConfig = {
      apiKey: "AIzaSyC2Yk0eE0LL2902SQGlHWaTKrTB9IZFsBQ",
      authDomain: "nikki-app-e8feb.firebaseapp.com",
      projectId: "nikki-app-e8feb",
      storageBucket: "nikki-app-e8feb.firebasestorage.app",
      messagingSenderId: "550420341822",
      appId: "1:550420341822:web:889f9a83470f9b22c0dd6f",
      measurementId: "G-T66PBRW95H"
    };

    const app = initializeApp(firebaseConfig);
    const auth = getAuth(app);
    const db = getFirestore(app);
    const provider = new GoogleAuthProvider();

    let currentUser = null;
    let currentDiaryId = null;

    // ログイン関係
    window.loginEmail = async () => {
      await signInWithEmailAndPassword(auth, email.value, password.value);
    };
    window.signupEmail = async () => {
      await createUserWithEmailAndPassword(auth, email.value, password.value);
    };
    window.loginWithGoogle = async () => {
      await signInWithPopup(auth, provider);
    };
    window.logout = () => signOut(auth);

    // 日記保存
    document.getElementById("diary-form").addEventListener("submit", async (e) => {
      e.preventDefault();
      const diary = {
        date: diaryDate.value,
        title: diaryTitle.value,
        weather: diaryWeather.value,
        body: diaryBody.value,
        health: diaryHealth.value,
        created: new Date()
      };
      await addDoc(collection(db, "users", currentUser.uid, "diaries"), diary);
      alert("日記を保存しました！");
      e.target.reset();
      loadDiaries(currentUser.uid);
    });

    // 日記一覧読み込み
    async function loadDiaries(uid) {
      const list = document.getElementById("diary-list");
      list.innerHTML = "";
      const snapshot = await getDocs(collection(db, "users", uid, "diaries"));
      snapshot.forEach(docSnap => {
        const data = docSnap.data();
        const li = document.createElement("li");
        li.textContent = `${data.date || "日付なし"}: ${data.title || "無題"}`;
        li.onclick = () => showDetail(uid, docSnap.id);
        list.appendChild(li);
      });
    }

    // 日記詳細を表示
    async function showDetail(uid, id) {
      const ref = doc(db, "users", uid, "diaries", id);
      const snap = await getDoc(ref);
      if (snap.exists()) {
        const data = snap.data();
        currentDiaryId = id;
        detailDate.value = data.date;
        detailTitle.value = data.title;
        detailWeather.value = data.weather;
        detailBody.value = data.body;
        detailHealth.value = data.health;
        document.getElementById("diary-detail").style.display = "block";
      }
    }

    // 日記を更新
    async function updateDiary() {
      const ref = doc(db, "users", currentUser.uid, "diaries", currentDiaryId);
      await updateDoc(ref, {
        date: detailDate.value,
        title: detailTitle.value,
        weather: detailWeather.value,
        body: detailBody.value,
        health: detailHealth.value
      });
      alert("更新しました！");
      loadDiaries(currentUser.uid);
    }
    window.updateDiary = updateDiary;

    // ログイン状態監視
    onAuthStateChanged(auth, user => {
      currentUser = user;
      authArea.style.display = user ? "none" : "block";
      userArea.style.display = user ? "block" : "none";
      userEmail.textContent = user?.email || "";
      if (user) loadDiaries(user.uid);
    });
  </script>
</body>
</html>
